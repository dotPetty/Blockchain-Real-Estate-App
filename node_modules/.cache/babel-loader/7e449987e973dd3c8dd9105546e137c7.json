{"ast":null,"code":"var _jsxFileName = \"/Volumes/PETTY-1TB/blockchain apps/rocket_realty/starter/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Search from './components/Search';\nimport Home from './components/Home';\n\n// ABIs\nimport RealEstate from './abis/RealEstate.json';\nimport Escrow from './abis/Escrow.json';\n\n// Config\nimport config from './config.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // ethers is the library our project to the blockchain (ethers provider).\n  // -> get accounts from metamask.\n  // -> create function for reading and setting the  account to component state. (by default is account doesn't exist return a null value)\n\n  const [account, setAccount] = useState(null); // gives us two different functions (1) read account from the state (2) set account to the state.\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setAccount(accounts[0]); // write to the state.\n    console.log(account[0]);\n  };\n\n  // calls loadBlockchainDate() (useEffect hook)\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards__section\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Welcome to Millow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"86F8VZ8lfjh6tQB+p37fx1M0D7Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","Navigation","Search","Home","RealEstate","Escrow","config","App","account","setAccount","loadBlockchainData","provider","providers","Web3Provider","window","ethereum","accounts","request","method","console","log"],"sources":["/Volumes/PETTY-1TB/blockchain apps/rocket_realty/starter/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\n// Components\nimport Navigation from './components/Navigation';\nimport Search from './components/Search';\nimport Home from './components/Home';\n\n// ABIs\nimport RealEstate from './abis/RealEstate.json'\nimport Escrow from './abis/Escrow.json'\n\n// Config\nimport config from './config.json';\n\nfunction App() {\n// ethers is the library our project to the blockchain (ethers provider).\n// -> get accounts from metamask.\n// -> create function for reading and setting the  account to component state. (by default is account doesn't exist return a null value)\n\n  const [account, setAccount] = useState(null) // gives us two different functions (1) read account from the state (2) set account to the state.\n  const loadBlockchainData = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n    setAccount(accounts[0]) // write to the state.\n    console.log(account[0])\n  }\n\n// calls loadBlockchainDate() (useEffect hook)\nuseEffect(() => {\n  loadBlockchainData()\n}, [])\n\n\n\n  return (\n    <div>\n\n      <Navigation />\n      <div className='cards__section'>\n\n        <h3>Welcome to Millow</h3>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,IAAI,MAAM,mBAAmB;;AAEpC;AACA,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,MAAM,MAAM,oBAAoB;;AAEvC;AACA,OAAOC,MAAM,MAAM,eAAe;AAAC;AAEnC,SAASC,GAAG,GAAG;EAAA;EACf;EACA;EACA;;EAEE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,EAAC;EAC7C,MAAMW,kBAAkB,GAAG,YAAY;IACrC,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;MAACC,MAAM,EAAE;IAAqB,CAAC,CAAC;IAC/ET,UAAU,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC;IACxBG,OAAO,CAACC,GAAG,CAACZ,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,CAAC;;EAEH;EACAV,SAAS,CAAC,MAAM;IACdY,kBAAkB,EAAE;EACtB,CAAC,EAAE,EAAE,CAAC;EAIJ,oBACE;IAAA,wBAEE,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eACd;MAAK,SAAS,EAAC,gBAAgB;MAAA,uBAE7B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAA0B;MAAA;MAAA;MAAA;IAAA,QAEtB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEF;AAEV;AAAC,GAhCQH,GAAG;AAAA,KAAHA,GAAG;AAkCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module"}